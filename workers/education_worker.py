# workers/education_worker.py
import asyncio
import logging
# โ ุงุณุชูุฑุงุฏ ุฏูุงู ุงูุชุทุจูุน ูู worker_utils
from workers.worker_utils import normalize_youtube_video
# โ ุงุณุชูุฑุงุฏ ุฏูุงู ุงูุฌูุจ ูู worker_utils
from workers.fetchers import fetch_youtube_videos

async def add_static_educational_books(queue: asyncio.Queue):
    """
    ุฏุงูุฉ ูุฅุถุงูุฉ ุงููุชุจ ุงููุฏุฑุณูุฉ ุงูุซุงุจุชุฉ ุฅูู ุทุงุจูุฑ ุงูููุงู.
    """
    logging.info("Education Worker: Adding static educational books to the queue...")
    static_books = [
        {
            "title": "๐ ูุชุงุจ ุงููุบุฉ ุงูุนุฑุจูุฉ - ุงุจุชุฏุงุฆู", "description": "ุฃุณุงุณูุงุช ุงููุบุฉ ุงูุนุฑุจูุฉ ูููุฑุญูุฉ ุงูุงุจุชุฏุงุฆูุฉ.",
            "source_url": "/books/arabic_primary", "level": "ุงูุงุจุชุฏุงุฆู", "subject": "ุงููุบุฉ ุงูุนุฑุจูุฉ"
        },
        {
            "title": "๐ ูุชุงุจ ุงูููุฒูุงุก - ุฅุนุฏุงุฏู", "description": "ูุจุงุฏุฆ ุงูููุฒูุงุก ูููุฑุญูุฉ ุงูุฅุนุฏุงุฏูุฉ.",
            "source_url": "/books/physics_middle", "level": "ุงูุฅุนุฏุงุฏู", "subject": "ุงูููุฒูุงุก"
        },
        {
            "title": "๐ ูุชุงุจ ุงูุฑูุงุถูุงุช - ุฅุนุฏุงุฏู", "description": "ุฃุณุงุณูุงุช ุงูุฌุจุฑ ูุงูููุฏุณุฉ ูููุฑุญูุฉ ุงูุฅุนุฏุงุฏูุฉ.",
            "source_url": "/books/math_middle", "level": "ุงูุฅุนุฏุงุฏู", "subject": "ุงูุฑูุงุถูุงุช"
        },
        {
            "title": "๐ ูุชุงุจ ุงูููููุงุก - ุซุงููู", "description": "ููุงููู ูุชูุฏูุฉ ูู ุงูููููุงุก ูููุฑุญูุฉ ุงูุซุงูููุฉ.",
            "source_url": "/books/chemistry_high", "level": "ุงูุซุงููู", "subject": "ุงูููููุงุก"
        },
        {
            "title": "๐ ูุชุงุจ ุงูููุณูุฉ - ุซุงููู", "description": "ููุฏูุฉ ุฅูู ุงูููุณูุฉ ุงููุฏููุฉ ูุงูุญุฏูุซุฉ.",
            "source_url": "/books/philosophy_high", "level": "ุงูุซุงููู", "subject": "ุงูููุณูุฉ"
        },
        {
            "title": "๐ ูุชุงุจ ุงูุฅุญุตุงุก - ุฌุงูุนู", "description": "ูุฏุฎู ุฅูู ุนูู ุงูุฅุญุตุงุก ูุชุญููู ุงูุจูุงูุงุช.",
            "source_url": "/books/stats_university", "level": "ุงูุฌุงูุนู", "subject": "ุงูุฅุญุตุงุก"
        },
        {
            "title": "๐ ูุชุงุจ ุนูู ุงูููุณ - ุฌุงูุนู", "description": "ูุธุฑูุงุช ุงูุดุฎุตูุฉ ูุงูุณููู ูุงูุชุนูู.",
            "source_url": "/books/psychology_university", "level": "ุงูุฌุงูุนู", "subject": "ุนูู ุงูููุณ"
        },
    ]

    for book in static_books:
        book_data = {
            "title": book["title"], "description": book["description"],
            "thumbnail": None, "source": "ุงูููุชุจุฉ ุงูุฑูููุฉ",
            "source_id": book["source_url"], "source_url": book["source_url"],
            "content_type": "educational",
            "tags": ["ูุชุงุจ ูุฏุฑุณู", book["level"], book["subject"]],
            "language": "ar"
        }
        await queue.put(book_data)
    logging.info(f"Education Worker: Added {len(static_books)} static books.")


async def educational_task_generator(queue: asyncio.Queue):
    """
    ุงูุฏุงูุฉ ุงูุฑุฆูุณูุฉ ูุนุงูู ุงูุฏุฑูุณ: ุชุถูู ุงููุชุจ ุงูุซุงุจุชุฉ ุซู ุชุจุญุซ ุนู ููุฏูููุงุช.
    """
    await add_static_educational_books(queue)

    # โ ุชูุณูุน ุงูููุงุฏ ูุงููุณุชููุงุช
    subjects = [
        "ุงูุฑูุงุถูุงุช", "ุงูููุฒูุงุก", "ุงูููููุงุก", "ุนููู ุงูุญูุงุฉ ูุงูุฃุฑุถ", "ุงููุบุฉ ุงูุนุฑุจูุฉ",
        "ุงููุบุฉ ุงููุฑูุณูุฉ", "ุงููุบุฉ ุงูุฅูุฌููุฒูุฉ", "ุงูููุณูุฉ", "ุงูุชุงุฑูุฎ", "ุงูุฌุบุฑุงููุง",
        "ุงูุจุฑูุฌุฉ", "ุนูู ุงูููุณ", "ุงูุงูุชุตุงุฏ", "ุงูุณูุงุณุฉ"
    ]
    levels = ["ุงูุงุจุชุฏุงุฆู", "ุงูุฅุนุฏุงุฏู", "ุงูุซุงููู", "ุงูุฌุงูุนู"]
    query_types = ["ุดุฑุญ ุฏุฑุณ", "ุชูุงุฑูู ูุญููู", "ูุฑุงุฌุนุฉ ุดุงููุฉ"]

    queries = [
        {"query": f"{qtype} {subject} ูููุณุชูู {level}", "level": level, "subject": subject, "type": qtype}
        for level in levels for subject in subjects for qtype in query_types
    ]

    logging.info(f"Education Worker: Starting to fetch videos for {len(queries)} detailed queries...")
    
    seen_ids = set()
    for item in queries:
        query = item["query"]
        try:
            videos_data = await fetch_youtube_videos(query, max_results=5)
            for video in videos_data:
                video_id = video.get("id", {}).get("videoId")
                if not video_id or video_id in seen_ids:
                    continue
                seen_ids.add(video_id)
                
                normalized_data = normalize_youtube_video(video, "educational")
                
                # โ ุงูุชุฃูุฏ ูู ุฃู ุงูุญููู ุงูุฃุณุงุณูุฉ ููุฌูุฏุฉ
                if normalized_data["title"] and normalized_data["source_id"]:
                    additional_tags = ["ููุฏูู ุชุนูููู", item["level"], item["subject"], item["type"]]
                    if not isinstance(normalized_data.get("tags"), list):
                        normalized_data["tags"] = []
                    normalized_data["tags"].extend(additional_tags)
                    await queue.put(normalized_data)
                await asyncio.sleep(0.5)

        except Exception as e:
            logging.error(f"Education Worker: Error processing query '{query}': {e}")
    
    logging.info(f"Education Worker: Cycle finished. Total unique videos queued: {len(seen_ids)}")
